import org.apache.spark.sql.functions._
import org.apache.spark.sql.{DataFrame, SparkSession}
import BusinessLogic.BusinessLogic.{sellingChannelCheck, retailPriceCheck,ProductIDCheck,sellingChannelCheck1}
import org.scalatest.flatspec.AnyFlatSpec

class BLtest extends AnyFlatSpec{




  val spark = SparkSession.builder()
    .appName("Read ConsumerDF")
    .master("local[*]") // Replace with your cluster URL if running on a cluster
    .getOrCreate()
  import spark.implicits._

  "selling channel" should "belong to 'Store Only', 'Cross Over' or Online Only' " in {
    val test_data_df = Seq(
      ("12345678", "1", "null", "red", "101", "3", "2020-05-22-12", "1"),
      ("asdfghjk", "2", "store", "blue", "34", "4", "1345-05-22-12", "0"),
      ("1234asdf", "3", "Store Only", "green", "20", "5", "2020-34-22-12", "1"),
      ("4342", "4", "Cross Over", "black", "", "6", "2020-05-22-45", "0"),
      ("52321234", "5", "Online Only", "white", "0", "7", "11", "1")).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")

    val sellingChannel_df = Seq(
      ("1234asdf", "3", "Store Only", "green", "20", "5", "2020-34-22-12", "1"),
      ("4342", "4", "Cross Over", "black", "", "6", "2020-05-22-45", "0"),
      ("52321234", "5", "Online Only", "white", "0", "7", "11", "1")).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")


    val result_df = sellingChannelCheck(test_data_df)
    val df_new1 = sellingChannel_df.except(result_df(1))
   // val df_new1 = sellingChannel_df.except(result_df)
    val result = df_new1.count()
    val actual = 0
    assertResult(actual)(result)



  }

  "Product ID" should " be all digits and of length 8 " in {
    val test_data_df = Seq(
      ("12345678", "1", "null", "red", "101", "3", "2020-05-22-12", "1"),
      ("asdfghjk", "2", "store", "blue", "34", "4", "1345-05-22-12", "0"),
      ("1234asdf", "3", "Store Only", "green", "20", "5", "2020-34-22-12", "1"),
      ("4342", "4", "Cross Over", "black", "", "6", "2020-05-22-45", "0"),
      ("52321234", "5", "Online Only", "white", "0", "7", "11", "1")).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")
    val productID_df = Seq(
      ("12345678", "1", "null", "red", "101", "3", "2020-05-22-12", "1"),
      ("52321234", "5", "Online Only", "white", "0", "7", "11", "1")).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")

    val result_df = ProductIDCheck(test_data_df)
    val df_new1 = productID_df.except(result_df(1))

    val result = df_new1.count()
    val actual = 0
    assertResult(actual)(result)


  }

  "Product price" should "not be 0 or null " in {

    val test_data_df = Seq(
      ("12345678", "1", "null", "red", "101", "3", "2020-05-22-12", "1"),
      ("asdfghjk", "2", "store", "blue", "34", "4", "1345-05-22-12", "0"),
      ("1234asdf", "3", "Store Only", "green", "20", "5", "2020-34-22-12", "1"),
      ("4342", "4", "Cross Over", "black", "", "6", "2020-05-22-45", "0"),
      ("52321234", "5", "Online Only", "white", "0", "7", "11", "1")).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")


    val priceCheck_df = Seq(
      ("12345678", "1", "null", "red", "101", "3", "2020-05-22-12", "1"),
      ("asdfghjk", "2", "store", "blue", "34", "4", "1345-05-22-12", "0"),
      ("1234asdf", "3", "Store Only", "green", "20", "5", "2020-34-22-12", "1")
    ).toDF("product_id",
      "location_id",
      "selling_channel",
      "prod_description",
      "retail_price",
      "onhand_quantity",
      "create_date",
      "promotion_eligibility")

    val result_df = retailPriceCheck(test_data_df)
    val df_new1 = priceCheck_df.except(result_df(1))
    val result = df_new1.count()
    val actual = 0
    assertResult(actual)(result)
  }

}
